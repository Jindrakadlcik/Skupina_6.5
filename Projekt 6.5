import pandas as pd
import numpy as np
import math
import re
from scipy.sparse import csr_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from surprise import Reader, Dataset, SVD
#Importování všech potřebných knihoven a modulů.

def main():
    df1, df2, df3, df4= data_ziskat()
    df = data_sjednotit(df1, df2, df3, df4)
    #hodnoceni_graf(df)
    df = pridat_movie_ID(df)
    film = input("Jaký film z databáze se Vám líbil?")
    recommend(df, film, 0)
 #Hlavní funkce programu, která řídí celý jeho chod, s možností vykreslení grafu, ta je pro zvýšení rychlosti chodu pozastavena. Konečným výstupem funkce je 10 doporučených filmů.
 
def data_ziskat():
    df1 = pd.read_csv('combined_data_1.txt', header= None, names= ['Cust_Id', 'Rating'], usecols= [0,1])
    df2 = pd.read_csv('combined_data_2.txt', header= None, names= ['Cust_Id', 'Rating'], usecols= [0,1])
    df3 = pd.read_csv('combined_data_3.txt', header= None, names= ['Cust_Id', 'Rating'], usecols= [0,1])
    df4 = pd.read_csv('combined_data_4.txt', header= None, names= ['Cust_Id', 'Rating'], usecols= [0,1])
    return df1, df2, df3, df4
#Funkce k načtení dat z textových souborů databáze do paměti. Funkce k chodu potřebuje 4 textové soubory s databází a jejím výstupem jsou 4 databáze df1, df2, df3, df4.
    
def data_sjednotit(df1, df2, df3, df4):
    df = df1.append(df2)
    df = df.append(df3)
    df = df.append(df4)
    return df 
#Funkce k sjednocení čtyř načtených databází z fce data_získat do jedné databáze "df" pro zjednodušení následných operací. Vstupem funkce jsou 4 databáze df1, df2, df3, df4. Výstupem je jedna sjednocená databáze df.
    
def hodnoceni_graf(df):
    p = df.groupby('Rating')['Rating'].agg(['count'])
    movie_count = df.isnull().sum()[1]
    cust_count = df['Cust_Id'].nunique() - movie_count
    rating_count = df['Cust_Id'].count() - movie_count
    ax = p.plot(kind='barh', legend=False, figsize=(15, 10))
    plt.title('Total pool: {:,} Movies, {:,} customers, {:,} ratings given'.format(movie_count, cust_count, rating_count),fontsize=20)
    plt.axis('off')
    for i in range(1, 6):
        ax.text(p.iloc[i - 1][0] / 4, i - 1, 'Rating {}: {:.0f}%'.format(i, p.iloc[i - 1][0] * 100 / p.sum()[0]), color='white', weight='bold')
    plt.show()
#Funkce k vykreslení grafu všech hodnocení podle četnosti. Vstupem je databáze df a výstupem graf.
    
def pridat_movie_ID(df):
    df_nan = pd.DataFrame(pd.isnull(df.Rating))
    df_nan = df_nan[df_nan['Rating'] == True]
    df_nan = df_nan.reset_index()
    movie_np = []
    movie_id = 1
    for i, j in zip(df_nan['index'][1:], df_nan['index'][:-1]):
        temp = np.full((1, i - j - 1), movie_id)
        movie_np = np.append(movie_np, temp)
        movie_id += 1
    last_record = np.full((1, len(df) - df_nan.iloc[-1, 0] - 1), movie_id)
    movie_np = np.append(movie_np, last_record)
    print('Movie numpy: {}'.format(movie_np))
    print('Length: {}'.format(len(movie_np)))
    df = df[pd.notnull(df['Rating'])]
    df['Movie_Id'] = movie_np.astype(int)
    df['Cust_Id'] = df['Cust_Id'].astype(int)
    print('-Dataset examples-')
    print(df.iloc[::5000000, :])
    return df
 #Funkce přidává sloupec MovieID do databáze. Vstupem je databáze df a výstupem je aktualizovaná databáze df.
    
def recommend(df, movie_title, min_count=0):
    f = ['count', 'mean']
    df_movie_summary = df.groupby('Movie_Id')['Rating'].agg(f)
    df_movie_summary.index = df_movie_summary.index.map(int)
    movie_benchmark = round(df_movie_summary['count'].quantile(0.7), 0)
    drop_movie_list = df_movie_summary[df_movie_summary['count'] < movie_benchmark].index
    print('Movie minimum times of review: {}'.format(movie_benchmark))
    df_cust_summary = df.groupby('Cust_Id')['Rating'].agg(f)
    df_cust_summary.index = df_cust_summary.index.map(int)
    cust_benchmark = round(df_cust_summary['count'].quantile(0.7), 0)
    drop_cust_list = df_cust_summary[df_cust_summary['count'] < cust_benchmark].index
    print('Customer minimum times of review: {}'.format(cust_benchmark))
    print('Original Shape: {}'.format(df.shape))
    df = df[~df['Movie_Id'].isin(drop_movie_list)]
    df = df[~df['Cust_Id'].isin(drop_cust_list)]
    print('After Trim Shape: {}'.format(df.shape))
    print('-Data Examples-')
    print(df.iloc[::5000000, :])
    df_p = pd.pivot_table(df, values='Rating', index='Cust_Id', columns='Movie_Id')
    print(df_p.shape)
    df_p = pd.pivot_table(df, values='Rating', index='Cust_Id', columns='Movie_Id')
    df_title = pd.read_csv('movie_titles.csv', encoding="ISO-8859-1", header=None, names=['Movie_Id', 'Year', 'Name'])
    df_title.set_index('Movie_Id', inplace=True)
    print(df_title.head(10))
    print("For movie ({})".format(movie_title))
    print("- Top 10 filmů doporučených pro Vás - ")
    i = int(df_title.index[df_title['Name'] == movie_title][0])
    target = df_p[i]
    similar_to_target = df_p.corrwith(target)
    corr_target = pd.DataFrame(similar_to_target, columns = ['PearsonR'])
    corr_target.dropna(inplace = True)
    corr_target = corr_target.sort_values('PearsonR', ascending = False)
    corr_target.index = corr_target.index.map(int)
    corr_target = corr_target.join(df_title).join(df_movie_summary)[['PearsonR', 'Name', 'count', 'mean']]
    print(corr_target[corr_target['count']>min_count][:10].to_string(index=False))
#Funkce zkvalitní databázi odstraněním filmů s příliš málo hodnoceními a také uživatele, kteří neposkytli dostatek hodnocení pro rychlejší běh programu. Dále načte názvy filmů z tabulky. Nakonec funkce poskytne pomocí pearsonovské korelace 10 filmů, které by se zákazníkovi mohly líbit, na základě jím vloženého filmu, o němž nám zákazník řekl, že se mu líbil. Vstupem funkce je databáze df, jméno filmu z databáze, který se zákazníkovi líbil a 
    
if __name__ == "__main__":
                main()
